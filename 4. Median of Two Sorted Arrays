************ BRUTE ***********

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        int nums3[]=new int[n1+n2];
        int i=0,j=0,k=0;
        while(i<n1 && j<n2)
        {
            if(nums1[i] < nums2[j])
            nums3[k++]=nums1[i++];
            else
            nums3[k++]=nums2[j++];
        }
        while(i<n1)
        {
           nums3[k++]=nums1[i++];
        }
        while(j<n2)
        {
           nums3[k++]=nums2[j++];
        }
        if((n1+n2) % 2 == 1)
        return (double)nums3[(n1+n2)/2];
        else
        return ( (double) (nums3[(n1+n2)/2] ) + (double) (nums3[(n1+n2)/2 -1])) / 2.0;
    }
}

        Time Complexity: O(n1+n2),                                    Space Complexity: O(n1+n2),


*********** BETTER *******
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        int ind2=(n1+n2)/2;
        int ind1=ind2-1;
        int ind1el=-1;
        int ind2el=-1;
        int i=0,j=0,cnt=0;
        while(i<n1 && j<n2)
        {
            if(nums1[i]<nums2[j])
            {
                if(cnt == ind1) ind1el=nums1[i];
                if(cnt == ind2) ind2el=nums1[i];
                cnt++;
                i++;
            }
            else
            {
                if(cnt == ind1) ind1el=nums2[j];
                if(cnt == ind2) ind2el=nums2[j];
                cnt++;
                j++;

            }
        }
        while(i<n1)
        {
                if(cnt == ind1) ind1el=nums1[i];
                if(cnt == ind2) ind2el=nums1[i];
                cnt++;
                i++;;

        }
        while(j<n2)
        {
                if(cnt == ind1) ind1el=nums2[j];
                if(cnt == ind2) ind2el=nums2[j];
                cnt++;
                j++;

        }
        if((n1+n2)%2 == 1)
        return (double)ind2el;
        else
        return ((double)(ind1el + ind2el))/2.0;
    }
}

 Time Complexity: O(n1+n2),                                    Space Complexity: O(1),



******** OPTIMAL *****

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;

                //if n1 is bigger swap the arrays:
       if(n1>n2) return findMedianSortedArrays(nums2,nums1);
       int left=(n1+n2+1)/2;   //length of left half
       int low=0,high=n1;     //apply binary search: on which array is shorter

       while(low<=high)
       {
       int mid1=(low+high)/2;
       int mid2=left-mid1;

      //calculate l1, l2, r1 and r2;

            int l1 = (mid1 > 0) ? nums1[mid1 - 1] : Integer.MIN_VALUE;
            int l2 = (mid2 > 0) ? nums2[mid2 - 1] : Integer.MIN_VALUE;
            int r1 = (mid1 < n1) ? nums1[mid1] : Integer.MAX_VALUE;
            int r2 = (mid2 < n2) ? nums2[mid2] : Integer.MAX_VALUE;
          if(l1 <= r2 && l2 <= r1)
       {
           if((n1+n2) % 2 == 1 )
           return (double)(Math.max(l1,l2));
           else return (double)((Math.max(l1,l2) + Math.min(r1,r2)))/2.0;
       }
       else if(l1>r2) high=mid1-1;
       else low=mid1+1;
    }
    return 0;
}
}

Time Complexity: O(log(min(n1,n2)))  SC O(1)
