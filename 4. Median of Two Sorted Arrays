************ BRUTE ***********

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        int nums3[]=new int[n1+n2];
        int i=0,j=0,k=0;
        while(i<n1 && j<n2)
        {
            if(nums1[i] < nums2[j])
            nums3[k++]=nums1[i++];
            else
            nums3[k++]=nums2[j++];
        }
        while(i<n1)
        {
           nums3[k++]=nums1[i++];
        }
        while(j<n2)
        {
           nums3[k++]=nums2[j++];
        }
        if((n1+n2) % 2 == 1)
        return (double)nums3[(n1+n2)/2];
        else
        return ( (double) (nums3[(n1+n2)/2] ) + (double) (nums3[(n1+n2)/2 -1])) / 2.0;
    }
}

        Time Complexity: O(n1+n2),                                    Space Complexity: O(n1+n2),


*********** BETTER *******
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        int ind2=(n1+n2)/2;
        int ind1=ind2-1;
        int indel1=-1;
        int indel2=-1;
        int i=0,j=0,cnt=0;
        while(i<n1 && j<n2)
        {
            if(nums1[i]<nums2[j])
            {
                if(cnt == ind1) indel1=nums1[i];
                if(cnt == ind2) indel2=nums1[i];
                cnt++;
                i++;
            }
            else
            {
                if(cnt == ind1) indel1=nums2[j];
                if(cnt == ind2) indel2=nums2[j];
                cnt++;
                j++;

            }
        }
        while(i<n1)
        {
               if(cnt == ind1) indel1=nums1[i];
                if(cnt == ind2) indel2=nums1[i];
                cnt++;
                i++;

        }
        while(j<n2)
        {
                if(cnt == ind1) indel1=nums2[j];
                if(cnt == ind2) indel2=nums2[j];
                cnt++;
                j++;

        }
        if((n1+n2)%2 == 1)
        return (double)indel2;
        else
        return ((double)(indel1 + indel2))/2.0;
    }
}

 Time Complexity: O(n1+n2),                                    Space Complexity: O(1),
