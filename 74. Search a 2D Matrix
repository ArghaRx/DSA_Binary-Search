********** BRUTE ********


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n=matrix.length;
        int m=matrix[0].length;
        for(int i= 0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j] == target)
                return true;
            }
        }
        return false;
    }
}

Time Complexity: O(N X M),      Space Complexity: O(1)

**************  BRUTE in codeninja ***********

import java.util.ArrayList;

public class Solution {
    public static boolean searchMatrix(ArrayList<ArrayList<Integer>> mat, int target) {
        int n = mat.size();
        int m = (n > 0) ? mat.get(0).size() : 0;                 // Initialize m only if n > 0

       

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat.get(i).get(j) == target) {
                    return true;
                }
            }
        }
        return false;
    }
}





************ BETTER  ***********

lass Solution {
    public static boolean binarySearch(int matrix[], int target) {
        int n = matrix.length;
        int low = 0, high = n - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (matrix[mid] == target) return true;
            else if (matrix[mid] > target)
                high = mid - 1;
            else
                low = mid + 1;
        }
        return false;
    }

    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        for (int i = 0; i < n; i++) {
            if (matrix[i][0] <= target && target <= matrix[i][m - 1])
                return binarySearch(matrix[i], target);
        }
        return false;
    }
}

Time Complexity: O(N X log(M)),      Space Complexity: O(1)



***** OPTIMAL *****

class Solution {
   

    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        for (int i = 0; i < n; i++)
             {
                 int low = 0 , high = (n*m) - 1;
                 
                 while(low<=high)
                {
                    int mid=(low+high)/2;
                    int row=mid/m;int col=mid%m;
                     if(matrix[row][col] == target)
                     return true;
                     else if(matrix[row][col] < target)
                     low=mid+1;
                     else
                     high=mid-1;
                 }
             }
        return false;
                     
    }
                     
}

Time Complexity: O(log(NxM)), 





