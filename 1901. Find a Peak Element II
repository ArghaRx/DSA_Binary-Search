************** OPTIMAL  ***************

class Solution {
    public static int maxIndex(int mat[][],int n,int m,int col)
    {
   
     int index = -1;
     int maxvalue = Integer.MIN_VALUE;
     for ( int i = 0 ; i < n ; i++ )
     {
             if ( mat[i][col] > maxvalue){

             maxvalue=mat[i][col];
             index=i;
             }
         
     }
     return index;
    }
    public int[] findPeakGrid(int[][] mat) {
        int n = mat.length;
        int m = mat[0].length;
        int low = 0;
        int high = m - 1 ;
        while ( low <= high )
        {
            int mid = ( low + high ) / 2;
            int maxRowIndex = maxIndex( mat , n , m , mid);
            int leftEle = ( mid - 1 ) >= 0 ? mat[maxRowIndex][mid-1] : - 1 ;
            int rightEle = ( mid + 1 ) < m ? mat[maxRowIndex][mid+1] : - 1 ;
            if ( mat[maxRowIndex][mid] > leftEle && mat[maxRowIndex][mid] > rightEle )
               return new int[] {maxRowIndex, mid};
            else if ( mat[maxRowIndex][mid] < leftEle)
               high=mid-1;
            else
               low = mid + 1;

        }
      //  return null; 
        return new int[]{-1,-1};
    }
}

TC -O(m * log(n))
