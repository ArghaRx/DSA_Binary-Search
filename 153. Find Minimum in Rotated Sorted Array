********* BRUTE *******
class Solution {
    public int findMin(int[] nums) {
        int mini=Integer.MAX_VALUE;
        for(int i=0;i<nums.length;i++)
        {
            mini=Math.min(mini,nums[i]);
        }
        return mini;
    }
}


****** OPTIMAL 1  ******

class Solution {
    public int findMin(int[] nums) {
        int ans=Integer.MAX_VALUE;
        int low=0,high=nums.length-1;
        while(low<=high)
        {
       int mid=(low+high)/2;

             //if left part is sorted:
            if(nums[low]<=nums[mid])
            {
                ans=Math.min(ans,nums[low]);
                low=mid+1;
            }

             //if right part is sorted:
            else
            {
                ans=Math.min(ans,nums[mid]);
                high=mid-1;
            }
        }
        return ans;
    }
}

****** OPTIMAAL 2 *****
class Solution {
    public int findMin(int[] nums) {
        int ans=Integer.MAX_VALUE;
        int low=0,high=nums.length-1;
        while(low<=high)
        {
      
             //search space is already sorted
            //then arr[low] will always be
            //the minimum in that search space:
          if(nums[low]<=nums[high])
          {
              ans=Math.min(ans,nums[low]);
              break;
          }


            int mid=(low+high)/2;

             //if left part is sorted:
            if(nums[low]<=nums[mid])
            {
                ans=Math.min(ans,nums[low]);
                low=mid+1;
            }

             //if right part is sorted:
            else
            {
                ans=Math.min(ans,nums[mid]);
                high=mid-1;
            }
        }
        return ans;
    }
}


