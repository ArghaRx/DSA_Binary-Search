******* Binay Search Approach ******

public class Solution {
    public static int firstoccarance(int arr[], int n, int k) {
        int low = 0, high = n - 1;
        int first = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == k) {
                first = mid;
                high = mid - 1;
            } else if(arr[mid] < k)
                low = mid + 1;

              else
              high = mid - 1;  
        }
        return first;
    }

    public static int lastoccarance(int arr[], int n, int k) {
        int low = 0, high = n - 1;
        int last = -1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == k) {
                last = mid;
                low= mid + 1;
            } else if( arr[mid] > k)
                high = mid - 1;
              else
              low = mid + 1;  
        }
        return last;
    }

    public static int[] searchRange(int[] nums, int n, int k) {
        int first = firstoccarance(nums, n, k);
        int last = lastoccarance(nums, n, k);
        if (first == -1 ) {
            return new int[]{-1, -1};
        }
        return new int[]{first, last};
    }

    public static int count(int arr[], int n, int x) {
        int ans[] = searchRange(arr, n, x);
        if (ans[0] == -1) {
            return 0;
        }
        return (ans[1] - ans[0] + 1);
    }
}
