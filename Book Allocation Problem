****** BURUTE *****

import java.util.*;
public class Solution {
    public static int findstudent(ArrayList<Integer> arr,int maxhold)
    {
        int student =1;
        int stuhold=0;
        int n=arr.size();
        for(int i=0;i<n;i++)
        {
            if(arr.get(i) + stuhold > maxhold)
            {
                student++;
                stuhold=arr.get(i);
            }
            else
            stuhold += arr.get(i);
        }
        
        return student;
    }
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
        // Write your code here.
        int maxi =Integer.MIN_VALUE;
        int sum =0;
        for(int i=0;i<n;i++)
        {
            sum += arr.get(i);
            maxi =Math.max(maxi,arr.get(i)) ;
        }
        if(m>n) return -1;
        for(int i=maxi;i<=sum;i++)
        {
            if(findstudent(arr,i) == m)
            return i;
        }
        return -3;
        
    }
}



***** OPTIMAL *****

import java.util.*;
public class Solution {
    public static int findstudent(ArrayList<Integer> arr,int maxhold)
    {
        int student =1;
        int stuhold=0;
        int n=arr.size();
        for(int i=0;i<n;i++)
        {
            if(arr.get(i) + stuhold > maxhold)
            {
                student++;
                stuhold=arr.get(i);
            }
            else
            stuhold += arr.get(i);
        }
        
        return student;
    }
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
        // Write your code here.
        int low =Integer.MIN_VALUE;
        int high =0;
        for(int i=0;i<n;i++)
        {
            high += arr.get(i);
            low =Math.max(low,arr.get(i)) ;
        }
        if(m>n) return -1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(findstudent(arr,mid) > m)
            low=mid+1;
            else
            high=mid-1;
        }
        return low;
    }
}
