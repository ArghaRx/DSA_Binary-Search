******* BRUTE *****

public class Solution {
    public static int lowerBound(int []arr, int n, int x) {
        // Write your code here
        for(int i=0;i<n;i++)
        {
            if(arr[i] >= x) return i;
        }
        return n;      //return hypothothecal index
    }
}

Time Complexity: O(N), where N = size of the given array.
SC - O(1)


*****  Binary Search Approach *****

public class Solution {
    public static int lowerBound(int []arr, int n, int x) {
        // Write your code here

        int low=0, high= n-1;
        int ans = n;
        while ( low <= high )
        {
            int mid = (low + high) / 2;
            if( arr[mid] >= x)
            {
                  // maybe an answer
                ans=mid;
                high = mid-1;  //look for smaller index on the left
            }
            else 
            low = mid + 1; //look on the right
        }
        return ans;
        
    }
}

Time Complexity: O(logN), where N = size of the given array.
Reason: We are basically using the Binary Search algorithm.

Space Complexity: O(1) as we are using no extra space.
