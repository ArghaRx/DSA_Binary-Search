***********  BRUTE  ************

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(matrix[i][j] == target)
                 return true;
            }
        }
        return false;
        
    }
}


TC - O(N*M)    SC - O(1)



*************  BETTER  ****************

class Solution {
    public static boolean binarySearch(int arr[],int x)
    {
        int n=arr.length;
        int low=0,high=n-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(arr[mid] == x)
            return true;
            else if(arr[mid]<x)
            low=mid+1;
            else
            high=mid-1;
        }
        return false;
    }
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        for(int i=0;i<n;i++)
        {
            boolean value=binarySearch(matrix[i],target);
            if(value == true) return true;
        }
        return false;
        
    }
}

TC - O ( N * log(M))    SC - O(1)




************* OPTIMAL  **************

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        int row=0,col=m-1;
        while(row < n && col >= 0)
        {
            if(matrix[row][col] == target)
            return true;
            else if (matrix[row][col] < target)
            row++;
            else
            col--;

        }
        return false;
    }
}

Time Complexity: O(N+M)    SC - O(1)
