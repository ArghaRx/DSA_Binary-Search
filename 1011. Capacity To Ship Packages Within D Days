********* Brute *******

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int possibleDay(int weights[],int capacity)
    {   // ATFIRST TAKE FIRST DAY AND LOAD AS 0
        int load=0;
        int day = 1;
        int n=weights.length;
        for(int i=0;i<n;i++)
        {
            if(load+weights[i] <= capacity)  // IF LOAD AND THIS
                                          // LOAD WITHIN THE CAPACITY LOAD 
            load += weights[i];
            else
            {
                    // GOES ANOTHER DAY AND NEW LOAD START IN NEW DAY
                day ++;
                load = weights[i];
            }

        }
        return day;
    }
    public static int leastWeightCapacity(int[] weights, int d) {
        // Write your code here.
         int n = weights.length;
        int maxi=Integer.MIN_VALUE;
        int sum=0;
        for(int i=0;i<n;i++)
        {
            maxi=Math.max(maxi,weights[i]);
            sum +=weights[i];
        }
        for(int i=maxi;i<=sum;i++)
        {
            if(possibleDay(weights,i) <= d)
            return i;
        }
        return -1;
    }
}

Time Complexity: O(N * (sum(weights[]) – max(weights[]) + 1)),     Space Complexity: O(1) 





***********  OPTIMAL *******

class Solution {
   public static int possibleDay(int weights[],int capacity)
    {   // ATFIRST TAKE FIRST DAY AND LOAD AS 0
        int load=0;
        int day = 1;
        int n=weights.length;
        for(int i=0;i<n;i++)
        {
            if(load+weights[i] <= capacity) //IF LOAD AND THIS
             //LOAD WITHIN THE CAPACITY LOAD 
            load += weights[i];
            else
            {
                // GOES ANOTHER DAY AND NEW LOAD START IN NEW DAY
                day ++;
                load = weights[i];
            }

        }
        return day;
    }
    public int shipWithinDays(int[] weights, int days) {
        int n = weights.length;
        int maxi=Integer.MIN_VALUE;
        int sum=0;
        for(int i=0;i<n;i++)
        {
            maxi=Math.max(maxi,weights[i]);
            sum +=weights[i];
        }
        int low=maxi,high=sum;
        while(low <=high)
        {
            int mid=(low+high)/2;
            if(possibleDay(weights,mid) <= days)
            high=mid-1;
            else
            low=mid+1;

        }
        return low;
    }
}


Time Complexity: O(N * log(sum(weights[]) – max(weights[]) + 1)),     SC O(1)
